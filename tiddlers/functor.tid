created: 20191225173535263
list: 
modified: 20200808140723514
tags: functor [[Functional programming]]
title: functor
type: text/vnd.tiddlywiki

functors are mapping/morphisms between [[categories|category]] that preserve structure.

functors map bag of object to another bag of objects. 
functions map elements of a set to another elements of some set. and morphisms in first category to morphisms in the other one.

Example in haskell: following could be a functor from category of Hask (or [[Set]]) to same category. 

```
data Identity a  = MkId a
```

`Identity` is a type constructor: a function that takes any type as value, and returns another type. 
`Mkid` is a data constructor: a function that takes values of type `a` and returns values of type `Identity a`

so far, it's about mapping the objects (sets in Set). now we try mapping of functions (morphisms in Set). 

```
mapId :: (a -> b) -> Identity a -> Identity b
mapId f (MkId x) = MkId f x  
```

mapId lifts f in first category into the other one.

Functor is a typeclass in Haskell. 

class Functor f where
   fmap:: (a->b) -> ( fa -> fb)

it introduces an interface for those containers that let you apply a function over their values.

```
fmap :: (Functor f) => (a -> b) -> f a -> f b
```

Maybe is an instance of Functor:

```
instance Functor Maybe where
   fmap f Just a = Just f a 
   fmap f Nothing = Nothing
```

!! Examples

fmap a function over maybe functor:

```
fmap (+3) Just 1 = Just (+3) 1 = Just 4
```

fmap a function over function functor is a just function composition.

```
fmap (+3) (*2) = (+3) . (*2) 
fmap (+3) (*2) 1 = (+3) . (*2) 1 = 3 + (2 * 1)
```

!! laws to be a functor:

```
fmap id = id 
fmap (f . g) = (fmap f) . (fmap g)
```
